rules for method overloading
==============================================
The rules for method overloading resolution in Java are as follows:

1.The compiler determines the method to be called based on the number and type of arguments.
2.If an exact match is found, that method is called.
3.If an exact match is not found, the compiler looks for the closest match by performing automatic type conversions.
4.If multiple methods match after automatic type conversions, the compiler chooses the most specific one.
5.If no match is found, a compilation error occurs.

Method Overloading
===============================
With method overloading, multiple methods can have the same name with different parameters:

Example:
int myMethod(int x)
float myMethod(float x)
double myMethod(double x, double y)
Consider the following example, which has two methods that add numbers of different type:

Example:
static int plusMethodInt(int x, int y) {
  return x + y;
}

static double plusMethodDouble(double x, double y) {
  return x + y;
}

public static void main(String[] args) {
  int myNum1 = plusMethodInt(8, 5);
  double myNum2 = plusMethodDouble(4.3, 6.26);
  System.out.println("int: " + myNum1);
  System.out.println("double: " + myNum2);
}

Instead of defining two methods that should do the same thing, it is better to overload one.

In the example below, we overload the plusMethod method to work for both int and double:

Example
static int plusMethod(int x, int y) {
  return x + y;
}

static double plusMethod(double x, double y) {
  return x + y;
}

public static void main(String[] args) {
  int myNum1 = plusMethod(8, 5);
  double myNum2 = plusMethod(4.3, 6.26);
  System.out.println("int: " + myNum1);
  System.out.println("double: " + myNum2);
} 
 
 OUTPUT:
 int: 13
double: 10.559999999999999
 

