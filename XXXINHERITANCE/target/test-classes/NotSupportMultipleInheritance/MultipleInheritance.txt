Multiple Inheritance (through interfaces):
====================================================================================================
 Java doesn't support multiple inheritance of classes, where a class can inherit from multiple classes. However,
  multiple inheritance can be achieved through interfaces. A class can implement multiple interfaces, thereby 
  inheriting their abstract methods.

Q) Why multiple inheritance is not supported in java?
=============================================================================
To reduce the complexity and simplify the language, multiple inheritance is not supported in java.

Consider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes 
have the same method and you call it from child class object, there will be ambiguity to call the method of A or B
 class.

Since compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.
==============================================================================================
class A{  
void msg(){System.out.println("Hello");}  
}  
class B{  
void msg(){System.out.println("Welcome");}  
}  
class C extends A,B{//suppose if it were  
   
 public static void main(String args[]){  
   C obj=new C();  
   obj.msg();//Now which msg() method would be invoked?  
}  
}  
===================================================================================================
Output:
Compile Time Error
=============================================================================================================
MULTIPLE INHERITANCE
===============================================================================================================
In Java, a class cannot directly inherit from multiple classes (multiple inheritance of classes is not allowed). 
However, you can achieve a form of multiple inheritance by implementing multiple interfaces. Here's an example:
=============================================================================================================
interface Interface1 {
    void method1();
}

interface Interface2 {
    void method2();
}

class MyClass implements Interface1, Interface2 {
    public void method1() {
        System.out.println("Implementation of method1");
    }

    public void method2() {
        System.out.println("Implementation of method2");
    }
}

public class MultipleInheritanceExample {
    public static void main(String[] args) {
        MyClass myClass = new MyClass();
        myClass.method1(); // Call method1 from Interface1
        myClass.method2(); // Call method2 from Interface2
    }
}
===========================================================================================================
In this example, we have two interfaces: Interface1 and Interface2. Each interface declares a single method.

The MyClass class implements both Interface1 and Interface2 by providing the implementation for the methods 
declared in both interfaces.

In the main() method, we create an object of MyClass and invoke the methods method1() and method2(). Since MyClass 
implements both interfaces, it can provide the implementation for both methods.
===============================================================================================================
Output:
Implementation of method1
Implementation of method2
===========================================================================================================
Through implementing multiple interfaces, the MyClass class effectively achieves a form of multiple inheritance, 
inheriting and providing the implementation for multiple sets of behaviors defined by the interfaces.